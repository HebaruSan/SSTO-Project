//Settings 
SSTOLPG{
	name = LPG
	// improvment in Isp in %
	realistic = 4
	stock = 6
	inferior = 20
	jet = 
	
	//target mass ratio for Lightweight LPG tanks
	LPGOX = 100
	LPG = 200
}

//DO NOT EDIT ANYTHING BELOW THIS LINE
@SSTOLPG[LPG]{
	//convert into mutiplier
	@realistic /= 100
	@realistic += 1
	@stock /= 100
	@stock += 1
	@inferior /= 100
	@inferior += 1
	B9 = #$stock$
	@B9 += #$realistic$
	@B9 /= 200
	@B9 += 1
}

RESOURCE_DEFINITION{
  name = LPG
  displayName = LPG
  abbreviation = LPG
  density = 0.00054 //540 g/l
  unitCost = 0.00256 //Calculated based on American prices for LPG - 0.4 $/l and RP-1 -125$/kg
  hsp = 2010
  flowMode = STACK_PRIORITY_SEARCH
  transfer = PUMP
  isTweakable = true
  volume = 1
}

+PART[*]:BEFORE[SSTOLPG]{ //Create LPG variants
  @name = #$name$_LPG
  @title = #$title$ (LPG)
  SSTOPreserve = 0
  SSTOLPG = 1.06
}
//Exclude copied tanks from SMURFF and rename so they skip engines branch
@PART[*_LPG]:HAS[@RESOURCE[LiquidFuel]|@RESOURCE[Oxidizer]]:FOR[SSTOLPG]{
	@name ^= :_LPG:_TLPG:
	%mftCheck = 0 //Stop ModularMFT from getting in the way
	@title = #$title$ (LPG)
}
@PART[*_TLPG]:HAS[#SMURFFExclude]{
	%SSTOSMURFF = #$SMURFFExclude$
	%SMURFFExclude = true
}
//Generate coefficients
@PART[bluedog_*_LPG]:FOR[SSTOLPG]{ //Increased LPG improvement - BDB engines have inferior Isp, so increase by 20%
	%SSTOLPG = 1.2
}
@PART[B9_*_LPG]:FOR[SSTOLPG]{ //Intermediate LPG improvement -both normal and high efficiency engines
	%SSTOLPG = 1.05
}
@PART[RSB*_LPG]:FOR[SSTOLPG]{ //Realistic LPG improvement
	%SSTOLPG = 1.04
}
@PART[*_LPG]:HAS[#manufacturer=Alcentar]:FOR[SSTOLPG]{ //RealEngines or LCA
	%SSTOLPG = 1.06
	//Determine if using LCA pack or RealEngines - the second should improve 4%
	SSTOTMP = #$MODEL/model$
	@SSTOTMP ^= "R(.*?)k" //LCA won't match
}
@PART[*_LPG]:HAS[#SSTOTMP=ealEnginesPac]:FOR[SSTOLPG]{ //Realistic improvement - 4%
	%SSTOLPG = 1.04
}
@PART[*_LPG]:FOR[SSTOLPG]{ //Clean up temporary distinguisher
	!SSTOTMP = delete temporary
}

//Check if each engine is eligible
@PART[*_LPG]:HAS[ModuleEngines*]{
	@MODULE[ModuleEngines*]{
		z = 0
	}
	@MODULE[ModuleEngines*]:HAS[@PROPELLANT[LiquidFuel]]{
		@z = 1
	}
	@MODULE[ModuleEngines*]:HAS[@PROPELLANT[Oxidizer],#z=1]{
		SSTOEligible = 1
	}
	@MODULE[ModuleEngines*]:HAS[@PROPELLANT[IntakeAir],#z=1]{
		SSTOEligible = 1
	}
}

//Apply the changes for engines
@PART[*_LPG]:HAS[ModuleEngines*]:HAS[#SSTOEligible=1]:FOR[SSTOLPG]{   //Rockets and jets, no nukes
	%SSTOPreserve = 1
	@MODULE[ModuleEngines*]:HAS[@PROPELLANT[LiquidFuel],@PROPELLANT[Oxidizer]]{
	//3.5:1 mass OX/LPG
	@PROPELLANT[Oxidizer]{
		@ratio = 0.7 //3.5 volumetric
	}
	@PROPELLANT[LiquidFuel]{
		@name = LPG
		@ratio = 2 //2 volumetric
	}
	
    @atmosphereCurve
    {
      k0 = #$key,0[1, ]$
      @k0 *= #$../../SSTOLPG$
      @key,0 = #0 $k0$
      
      k1 = #$key,1[1, ]$
      @k1 *= #$../../SSTOLPG$
      @key,1 = #1 $k1$
    }
  }
  @MODULE[ModuleEngines*]:HAS[@PROPELLANT[LiquidFuel],@PROPELLANT[IntakeAir]]{  //Jets
	//3.5:1 mass OX/LPG
	//
	@PROPELLANT[IntakeAir]{
		@ratio *= 1.75
	}
	@PROPELLANT[LiquidFuel]{
		@name = LPG
	}
	
    @atmosphereCurve
    {
      k0 = #$key,0[1, ]$
      @k0 *= 1.2
      @key,0 = #0 $k0$
    }
  }
}

//Remove parts which stayed the same
!PART[*_LPG]:HAS[#SSTOPreserve=0]:AFTER[SSTOLPG] {}


//Handle tanks separately
@PART[*_TLPG]:HAS[@RESOURCE[LiquidFuel]]:FOR[SSTOLPG] {
	SSTOFuel = #$RESOURCE[LiquidFuel]/maxAmount$
}
@PART[*_TLPG]:HAS[@RESOURCE[Oxidizer]]:FOR[SSTOLPG] {
	SSTOFuel = #$RESOURCE[LiquidFuel]/maxAmount$
}
@PART[*_TLPG]:HAS[@RESOURCE[Oxidizer],@RESOURCE[LiquidFuel]]:FOR[SSTOLPG] {
	SSTOFuel = #$RESOURCE[LiquidFuel]/maxAmount$
	@SSTOFuel += #$RESOURCE[Oxidizer]/maxAmount$
}
@PART[*_TLPG]{
	@mass *= 8
	// vvv rename the part to be meaningful vvv
	@title ^= :rocket fuel:LPG:
	@title ^= :jet fuel:LPG:
	@title ^= :liquid fuel:LPG:
	@title ^= :fuel:LPG:
}
+PART[*_TLPG]:FOR[SSTOLPG]{ //clone to create LPGox versions
	@name ^= :_TLPG:_TLPGOX: //distinguish from LPG only tanks
	@title ^= :LPG:LPGox:
	
	@mass /= #$@SSTOLPG[LPG]/LPGOX$ //LPGox dry weight, as set by user
	
	x = 11.9
	@x /= 11
	y = 6.8
	@y /= 11
	
	!RESOURCE[LiquidFuel,Oxidizer] {} //remove reources only now
	RESOURCE{
		name = LPG
		amount = #$../SSTOFuel$
		@amount */ #$../y$
		maxAmount = #$amount$
	}
	RESOURCE{
		name = Oxidizer
		amount = #$../SSTOFuel$
		@amount */ #$../x$
		maxAmount = #$amount$
	}
}
@PART[*_TLPG]:FOR[SSTOLPG]{ 
	@mass /= #$@SSTOLPG[LPG]/LPG$ //LPG dry weight, as set by user
	!RESOURCE[LiquidFuel] {} //remove reources only now
	!RESOURCE[Oxidizer] {}
	RESOURCE{
		name = LPG
		amount = #$../SSTOFuel$
		@amount *= 5
		maxAmount = #$amount$
	}
	@title ^= :
}


@PART[*_LPG]:HAS[@MODULE[ModuleEngines*:HAS[@PROPELLANT[LiquidFuel]]]] {} 
@PART[*_LPG]:HAS[@RESOURCE[LiquidFuel]] {
`	

// vvv MFT COMPATIBILITY
@TANK_DEFINITION[Default]{
	TANK{
		name = LPG
		amount = 0.0
		maxAmount = 0.0
		utilization = 4.25
		note = (pressurized)
	}
}
@TANK_DEFINITION[Fuselage]{
	TANK{
		name = LPG
		amount = 0.0
		maxAmount = 0.0
		utilization = 4.25
		note = (pressurized)
	}
}
@TANK_DEFINITION[Structural]{
	TANK{
		name = LPG
		amount = 0.0
		maxAmount = 0.0
		utilization = 4.25
		note = (pressurized)
	}
}
@TANK_DEFINITION[ServiceModule]{
	TANK{
		name = LPG
		amount = 0.0
		maxAmount = 0.0
		utilization = 4.25
		note = (pressurized)
	}
}
@TANK_DEFINITION[Balloon]{
	TANK{
		name = LPG
		amount = 0.0
		maxAmount = 0.0
		utilization = 4.25
		note = (pressurized)
	}
}
@PART[*]:FINAL{
	!SSTOLPG = done, delete unnecessary values
	!SSTOPreserve = 0
	!SSTOFuel = 0
	!SSTOTank = 0
	!SSTOSMURFF = 0
}

+PART[*]:HAS[@RESOURCE[LiquidFuel],@RESOURCE[Oxidizer]]{
	@name ^= 
}